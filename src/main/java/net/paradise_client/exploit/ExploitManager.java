package net.paradise_client.exploit;

import net.minecraft.client.MinecraftClient;
import net.paradise_client.*;
import net.paradise_client.exploit.impl.*;

import java.util.*;

/**
 * Manages and handles various exploits.
 *
 * @author SpigotRCE
 * @since 2.5
 */
public class ExploitManager {
  private final MinecraftClient minecraftClient;

  /**
   * A list of all available exploits.
   */
  private final ArrayList<Exploit> exploits = new ArrayList<>();

  /**
   * Constructs a new ExploitManager with the given exploits.
   */
  public ExploitManager(MinecraftClient minecraftClient) {
    this.minecraftClient = minecraftClient;
  }

  public void init() {
    register(new BrigadierExploit(minecraftClient));
    register(new PaperWindowExploit(minecraftClient));
    register(new SignExploit(minecraftClient));
    register(new NegativeInfinityExploit(minecraftClient));
    register(new VelocityReportExploit(minecraftClient));
    register(new ViaVersionExploit(minecraftClient));
  }

  /**
   * Retrieves the exploit with the given alias.
   *
   * @param exploit The {@link Exploit} to be registered.
   */
  public void register(Exploit exploit) {
    this.exploits.add(exploit);
  }

  /**
   * Handles the execution of the exploit with the given name.
   *
   * @param name The name of the exploit to be executed.
   */
  public void handleExploit(String name) {
    Exploit exploit = getExploit(name);
    if (exploit == null) {
      Helper.printChatMessage("Unknown exploit.");
      return;
    }
    ParadiseClient.EXPLOIT_MOD.isRunning = true;
    exploit.execute();
  }

  /**
   * Retrieves the exploit with the given alias.
   *
   * @param alias The alias of the exploit to be retrieved.
   *
   * @return The exploit with the given alias, or null if no such exploit exists.
   */
  public Exploit getExploit(String alias) {
    for (Exploit exploit : exploits) {
      if (exploit.getAlias().equals(alias)) {
        return exploit;
      }
    }
    return null;
  }

  /**
   * Retrieves the list of all available exploits.
   *
   * @return The list of all available exploits.
   */
  public List<Exploit> getExploits() {
    return exploits;
  }
}
