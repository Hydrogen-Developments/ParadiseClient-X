plugins {
    id 'fabric-loom' version '1.10.1'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
}

def gitHash = {
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
            ignoreExitValue = true
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        e.printStackTrace()
        return "unknown"
    }
}.call()

version = gitHash
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()

    maven {
        url 'https://jitpack.io'
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft(
            "com.mojang:minecraft:${project.minecraft_version}"
    )
    mappings(
            "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    )
    modImplementation(
            "net.fabricmc:fabric-loader:${project.loader_version}"
    )
    modImplementation(
            "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    )

    def shadowLibs = [
            "net.sf.trove4j:trove4j:3.0.3",
            "se.llbit:jo-nbt:1.2.0",
            "net.dv8tion:JDA:${jda_version}",
            "dev.dejvokep:boosted-yaml:${boosted_yaml_version}",
            "io.netty:netty-all:${project.netty}",
            "mysql:mysql-connector-java:${project.mysql}",
            "com.github.JnCrMx:discord-game-sdk4j:${project.discord_rpc}"
    ]
    shadowLibs.each {
        shadow(implementation(it))
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "git_hash": gitHash,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    archiveClassifier.set("dev")
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev")
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}
